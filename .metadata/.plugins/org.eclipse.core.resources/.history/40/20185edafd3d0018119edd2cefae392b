package com.bonc;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.TableDescriptors;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.IndexInfo;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.log4j.chainsaw.Main;

public class Test {
	 private static Connection connection;

	    static {
	        Configuration conf = new Configuration();
	        conf.set("hbase.zookeeper.quorum", "hadoop001,hadoop002,hadoop003");
	        try {
	            connection = ConnectionFactory.createConnection(conf);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	public  void createIndexUseAdmin() throws IOException{
	    String tableName = "zx";
	    String indexName = "zx_idx3";
	    String cols = "f1:c3";
	    Admin admin = connection.getAdmin();
	    admin.createIndex(tableName, indexName, cols);
	    System.out.println("创建成功");
	}
	//这张表上有哪些索引
	public void testListIndexsTable(){
	    try {
	        Admin admin=connection.getAdmin();
	        IndexInfo[] indexs=admin.listIndexsTable("zx");
	        for (IndexInfo index: indexs) {
	            System.out.println("index: "+index.toString());
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	}
	//所有索引
	public void testListIndexs(){
	    try {
	        Admin admin=connection.getAdmin();
	        IndexInfo[] indexs=admin.listIndex();
	        for (IndexInfo index: indexs) {
	            System.out.println("all index: "+index.toString());
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	    }

	}
	//这张表的这个列的索引是否存在
	public void testIndexExist(){
	    try {
	        Admin admin=connection.getAdmin();
	        boolean indexExists=admin.indexExists("zx","f1","c1");
	        System.out.println("是否存在"+indexExists);
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	}
	public void testIdx(){
	    try {
	    	
	    	Table t = connection.getTable(TableName.valueOf("zx"));
	        Scan scan = new Scan();
		//添加索引开关，false表示不走索引，true表示查询使用索引
	        scan.setAttribute("TTUINDEX", Bytes.toBytes("false"));
	        SingleColumnValueFilter singleColumnValueFilter = new 	SingleColumnValueFilter(Bytes.toBytes("f1"), 	Bytes.toBytes("c1"), 	CompareOp.GREATER_OR_EQUAL, 	Bytes.toBytes("v2"));
	        scan.setFilter(singleColumnValueFilter);

	        //注意返回的是resultscanner的
	        ResultScanner results=t.getScanner(scan);
	        for(Result result : results){
	            //result是一行数据，接下来是获取cell
	            Cell[] cells = result.rawCells();
	            for(Cell cell:cells){
	                	System.out.println("row:"+Bytes.toString(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength()));
	       cell.getFamilyArray();
	 	System.out.println("qualifier:"+Bytes.toString(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength()));
	        cell.getTimestamp();
	        		System.out.println("value:"+Bytes.toString(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()	));
	            }

	        }

	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	}
	 public void deleteIndex() throws IOException {
   		 Admin admin = connection.getAdmin();
    	 admin.deleteIndex("zx", "zx_idx1");
    	 System.out.println("删除成功");
	  }
	public static void main(String[] args) throws IOException {
		Test t = new Test();
		t.deleteIndex();
	}
	
}
